From 5faa6528a93181884201e09cdcbf0d4c386a72ba Mon Sep 17 00:00:00 2001
From: Arjan van de Ven <arjan.van.de.ven@intel.com>
Date: Wed, 19 Apr 2023 15:48:57 +0000
Subject: [PATCH] add sched yield mitigation

Some misguided apps hammer sched_yield() in a tight loop (they should
be using futexes instead) which causes massive lock contention even if
there is little work to do or to yield to. Rare limit yielding since
the base scheduler does a pretty good job already about just running
the right things.
---
 kernel/sched/core.c | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index df15a460c795..00d30abfae48 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -8434,10 +8434,22 @@ SYSCALL_DEFINE3(sched_getaffinity, pid_t, pid, unsigned int, len,
 	return ret;
 }
 
+static DEFINE_PER_CPU(unsigned long, last_yield);
+
 static void do_sched_yield(void)
 {
 	struct rq_flags rf;
 	struct rq *rq;
+	int cpu = raw_smp_processor_id();
+
+	cond_resched();
+
+	/* rate limit yielding to something sensible */
+	
+	if (!time_after(jiffies, per_cpu(last_yield, cpu)))
+		return;
+	
+	per_cpu(last_yield, cpu) = jiffies;
 
 	rq = this_rq_lock_irq(&rf);
 
-- 
2.39.2

